{"version":3,"sources":["components/Wrapper.jsx","components/Header.jsx","funcions/getGenres.js","components/Movie.jsx","components/Movies.jsx","components/Paginator.jsx","api/api.js","components/MoviesPage.jsx","components/MoviePage.jsx","components/Favorites.jsx","components/AppRouter.jsx","App.js","index.js"],"names":["Wrapper","props","marginX","width","children","Header","bgColor","p","color","height","alignItems","fontSize","mr","to","genres","id","name","Movie","ids","isFromMoviePage","movie","title","poster_path","release_date","location","useLocation","useState","isShow","setIsShow","isShowAdd","setIsShowAdd","genre_ids","map","find","g","direction","justifyContent","src","rounded","boxShadow","maxWidth","margin","fontWeight","i","length","overview","mt","pathname","onClick","favorites","localStorage","getItem","JSON","parse","removedFavs","filter","m","setItem","stringify","size","MovieList","movies","my","templateColumns","gap","Paginator","totalPages","page","setPage","Math","ceil","currentCluster","setCurrentCluster","clusters","cluster","push","hasPrev","setHasPrev","hasNext","setHasNext","disabled","instanse","axios","create","baseURL","params","API","get","response","data","query","MoviesPage","setMovies","setTotalPages","isLoading","setIsLoading","setQuery","a","getSearchedMovies","getMovies","total_pages","results","useEffect","fetchMovies","value","onChange","e","target","type","w","MoviePage","useParams","setMovie","recommend","setRecommend","fetchMovie","getMovie","getRecommendMovie","recommendData","textAlign","Favorites","favs","setFavs","localFavs","console","log","Movies","AppRouter","exact","path","App","templateRows","mb","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1733dc16.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Box} from \"@chakra-ui/react\";\r\n\r\nconst Wrapper = (props) => {\r\n    return (\r\n        <Box marginX=\"auto\" width=\"925px\">\r\n            {props.children}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport {Box, Flex, Spacer} from \"@chakra-ui/react\";\r\nimport Wrapper from \"./Wrapper\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n\r\n    \r\n    return (\r\n        <Box\r\n            bgColor=\"#032541\"\r\n            p={15}\r\n            color=\"white\"\r\n        >\r\n            <Wrapper>\r\n                <Flex height=\"50px\" alignItems=\"center\" fontSize=\"xl\">\r\n                    <Box mr={45}>\r\n                        <Link to=\"/movies\">\r\n                            Фильмы\r\n                        </Link>\r\n                    </Box>\r\n                    <Box mr={45}>\r\n                        <Link to=\"/favorites\">\r\n                            Избранные\r\n                        </Link>\r\n                    </Box>\r\n                    <Spacer />\r\n                </Flex>\r\n            </Wrapper>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Header;","const genres = [\r\n    {\r\n        id: 28,\r\n        name: \"боевик\"\r\n    },\r\n    {\r\n        id: 12,\r\n        name: \"приключения\"\r\n    },\r\n    {\r\n        id: 16,\r\n        name: \"мультфильм\"\r\n    },\r\n    {\r\n        id: 35,\r\n        name: \"комедия\"\r\n    },\r\n    {\r\n        id: 80,\r\n        name: \"криминал\"\r\n    },\r\n    {\r\n        id: 99,\r\n        name: \"документальный\"\r\n    },\r\n    {\r\n        id: 18,\r\n        name: \"драма\"\r\n    },\r\n    {\r\n        id: 10751,\r\n        name: \"семейный\"\r\n    },\r\n    {\r\n        id: 14,\r\n        name: \"фэнтези\"\r\n    },\r\n    {\r\n        id: 36,\r\n        name: \"история\"\r\n    },\r\n    {\r\n        id: 27,\r\n        name: \"ужасы\"\r\n    },\r\n    {\r\n        id: 10402,\r\n        name: \"музыка\"\r\n    },\r\n    {\r\n        id: 9648,\r\n        name: \"детектив\"\r\n    },\r\n    {\r\n        id: 10749,\r\n        name: \"мелодрама\"\r\n    },\r\n    {\r\n        id: 878,\r\n        name: \"фантастика\"\r\n    },\r\n    {\r\n        id: 10770,\r\n        name: \"телевизионный фильм\"\r\n    },\r\n    {\r\n        id: 53,\r\n        name: \"триллер\"\r\n    },\r\n    {\r\n        id: 10752,\r\n        name: \"военный\"\r\n    },\r\n    {\r\n        id: 37,\r\n        name: \"вестерн\"\r\n    }\r\n]\r\n\r\nexport function getGenres(ids) {\r\n    return ids.map(id => ({\r\n        id: id,\r\n        name: genres.find(g => g.id === id).name\r\n    }))\r\n}","import React, {useState} from 'react';\r\nimport {Box, Button, Center, Flex, Image, Spacer, Text} from \"@chakra-ui/react\";\r\nimport {getGenres} from \"../funcions/getGenres\";\r\nimport {Link, useLocation} from \"react-router-dom\";\r\n\r\nconst Movie = ({isFromMoviePage, movie: {title, poster_path, release_date, ...movie}}) => {\r\n    const location = useLocation()\r\n    const [isShow, setIsShow] = useState(true)\r\n    const [isShowAdd, setIsShowAdd] = useState(true)\r\n    let genres\r\n    if (movie.genre_ids) {\r\n        genres = getGenres(movie.genre_ids)\r\n    } else {\r\n        genres = movie.genres\r\n    }\r\n\r\n    const addFav = () => {\r\n        let favorites = []\r\n        if (localStorage.getItem('favorites')) {\r\n            favorites = JSON.parse(localStorage.getItem('favorites'))\r\n        }\r\n        if (!favorites.find(m => m.id === movie.id)) {\r\n            localStorage.setItem('favorites', JSON.stringify([\r\n                ...favorites,\r\n                {\r\n                    id: movie.id,\r\n                    title: title,\r\n                    poster_path: poster_path,\r\n                    genres: genres,\r\n                    release_date: release_date\r\n                }\r\n            ]))\r\n        }\r\n        setIsShowAdd(false)\r\n    }\r\n\r\n    const removeFav = () => {\r\n        let favorites = []\r\n        if (localStorage.getItem('favorites')) {\r\n            favorites = JSON.parse(localStorage.getItem('favorites'))\r\n        }\r\n        const removedFavs = favorites.filter(m => m.id !== movie.id)\r\n        setIsShow(false)\r\n        localStorage.setItem('favorites', JSON.stringify(removedFavs))\r\n    }\r\n\r\n    if (!isShow && !isFromMoviePage) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Flex direction={isFromMoviePage ? \"row\" : \"column\"} justifyContent=\"space-between\">\r\n            <Link to={\"/movies/\" + movie.id}>\r\n                {\r\n                    poster_path\r\n                        ? <Image\r\n                            src={\"https://image.tmdb.org/t/p/w220_and_h330_face\" + poster_path}\r\n                            width=\"220px\"\r\n                            rounded=\"lg\"\r\n                            boxShadow=\"2xl\"\r\n                        />\r\n                        : <Center width={220} height={330}>Картинки нет</Center>\r\n                }\r\n            </Link>\r\n            <Flex maxWidth={690} height={!isFromMoviePage && \"100%\"} direction=\"column\" justifyContent=\"space-between\">\r\n                <Box margin={2}>\r\n                    <Text fontSize={isFromMoviePage ? \"xl\" : \"md\"} fontWeight=\"bold\" >{title}</Text>\r\n                    <Text fontSize=\"xs\">\r\n                        {\r\n                            genres.map((g, i) => {\r\n                                return g.name + (i !== genres.length - 1 ? ', ' : '')\r\n                            })\r\n                        }\r\n                    </Text>\r\n                    <Text fontSize=\"xs\">{release_date}</Text>\r\n                    {\r\n                        isFromMoviePage && <Text>{movie.overview}</Text>\r\n                    }\r\n                </Box>\r\n                <Center mt=\"auto\" mr={isFromMoviePage && 'auto'}>\r\n                    {\r\n                        location.pathname === '/favorites'\r\n                            ? <Button onClick={removeFav} size=\"sm\">Удалить</Button>\r\n                            : isShowAdd\r\n                                ? <Button onClick={addFav} size=\"sm\">В избранные</Button>\r\n                                : <Text height=\"32px\" fontSize=\"sm\">Добавлено в избранные</Text>\r\n                    }\r\n                </Center>\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default Movie;","import React from 'react';\r\nimport {Grid} from \"@chakra-ui/react\";\r\nimport Movie from \"./Movie\";\r\n\r\nconst MovieList = ({movies}) => {\r\n    return (\r\n        <Grid my={15} templateColumns=\"repeat(4, 220px)\" gap=\"15px\">\r\n            {\r\n                movies.map(m => <Movie key={m.id} movie={m}/>)\r\n            }\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default MovieList;","import React, {useState} from 'react';\r\nimport {Box, Button, Center, Flex, Grid, Text} from \"@chakra-ui/react\";\r\n\r\nconst Paginator = ({totalPages, page, setPage}) => {\r\n    let [currentCluster, setCurrentCluster] = useState(Math.ceil(page / 10) - 1)\r\n    let clusters = []\r\n    let cluster = []\r\n    for (let i = 1; i <= totalPages; i++) {\r\n        cluster.push(i)\r\n        if (i % 10 === 0 || i === totalPages) {\r\n            clusters.push(cluster)\r\n            cluster = []\r\n        }\r\n    }\r\n    let [hasPrev, setHasPrev] = useState(currentCluster !== 0)\r\n    let [hasNext, setHasNext] = useState(currentCluster !== clusters.length - 1)\r\n    const decreaseCurrentCluster = () => {\r\n        setCurrentCluster(currentCluster - 1)\r\n        if (currentCluster - 1 === 0) {\r\n            setHasPrev(false)\r\n        } else if (!hasNext) {\r\n            setHasNext(true)\r\n        }\r\n    }\r\n    const increaseCurrentCluster = () => {\r\n        setCurrentCluster(currentCluster + 1)\r\n        if (currentCluster + 1 === clusters.length - 1) {\r\n            setHasNext(false)\r\n        } else if (!hasPrev) {\r\n            setHasPrev(true)\r\n        }\r\n    }\r\n    if (totalPages === 0) return null\r\n    return (\r\n            <Center>\r\n\r\n                <Button\r\n                    width={30}\r\n                    mr={1}\r\n                    size=\"xs\"\r\n                    onClick={decreaseCurrentCluster}\r\n                    disabled={!hasPrev}\r\n                >\r\n                    {\"<\"}\r\n                </Button>\r\n                {\r\n                    clusters[currentCluster].map( p =>\r\n                        <Button\r\n                            key={p}\r\n                            width={30}\r\n                            mr={1}\r\n                            size=\"xs\"\r\n                            onClick={() => setPage(p)}\r\n                            fontWeight={p === page && 'bold'}\r\n                        >\r\n                            {p}\r\n                        </Button>\r\n                    )\r\n                }\r\n                <Button\r\n                    width={30}\r\n                    size=\"xs\"\r\n                    onClick={increaseCurrentCluster}\r\n                    disabled={!hasNext}\r\n                >\r\n                    {\">\"}\r\n                </Button>\r\n            </Center>\r\n    );\r\n};\r\n\r\nexport default Paginator;","import axios from \"axios\";\r\n\r\nconst instanse = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3/'\r\n})\r\n\r\nconst params = {\r\n    'api_key': '9513ed8e703d28f1add7f2b34deac434',\r\n    'language': 'ru',\r\n    'region': 'ru'\r\n}\r\n\r\nexport default class API {\r\n    static async getMovies(page) {\r\n        const response = await instanse.get('movie/popular', {\r\n            params: {...params, page: page}\r\n        })\r\n        return response.data\r\n    }\r\n\r\n    static async getMovie(id) {\r\n        const response = await instanse.get('movie/' + id, {\r\n            params: params\r\n        })\r\n        return response.data\r\n    }\r\n\r\n    static async getRecommendMovie(id) {\r\n        const response = await instanse.get('movie/' + id + '/recommendations', {\r\n            params: params\r\n        })\r\n        return response.data\r\n    }\r\n\r\n    static async getSearchedMovies(query, page) {\r\n        const response = await instanse.get('search/movie', {\r\n            params: {...params, query: query, page: page}\r\n        })\r\n        return response.data\r\n    }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport MovieList from \"./Movies\";\r\nimport Paginator from \"./Paginator\";\r\nimport API from \"../api/api\";\r\nimport Wrapper from \"./Wrapper\";\r\nimport {Box, Button, Center, Grid, Input} from \"@chakra-ui/react\";\r\n\r\nconst MoviesPage = () => {\r\n\r\n    const [movies, setMovies] = useState([])\r\n    const [page, setPage] = useState(1)\r\n    const [totalPages, setTotalPages] = useState(0)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [query, setQuery] = useState('')\r\n\r\n\r\n    async function fetchMovies() {\r\n        setIsLoading(true)\r\n        let data\r\n        if (query) {\r\n            data = await API.getSearchedMovies(query, page)\r\n        } else {\r\n            data = await API.getMovies(page)\r\n        }\r\n        setTotalPages(data.total_pages)\r\n        setMovies(data.results)\r\n        setIsLoading(false)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        fetchMovies()\r\n    }, [page, query])\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Grid gap={15}>\r\n                <Center>\r\n                    <Input\r\n                        value={query}\r\n                        onChange={(e)=>setQuery(e.target.value)}\r\n                        type=\"text\"\r\n                        w=\"300px\"\r\n                        fontSize=\"xl\"\r\n                    />\r\n                </Center>\r\n                {\r\n                    isLoading\r\n                        ? <div>loading</div>\r\n                        : <div>\r\n                            <Paginator totalPages={totalPages} page={page} setPage={setPage} />\r\n                            <MovieList movies={movies} />\r\n                            <Paginator totalPages={totalPages} page={page} setPage={setPage} />\r\n                        </div>\r\n                }\r\n            </Grid>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default MoviesPage;","import React, {useEffect, useState} from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport API from \"../api/api\";\r\nimport Movie from \"./Movie\";\r\nimport MovieList from \"./Movies\";\r\nimport {Flex, Text} from \"@chakra-ui/react\";\r\n\r\nconst MoviePage = () => {\r\n\r\n    const {id} = useParams()\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [movie, setMovie] = useState(null)\r\n    const [recommend, setRecommend] = useState(null)\r\n\r\n    const fetchMovie = async () => {\r\n        setIsLoading(true)\r\n        const data = await API.getMovie(id)\r\n        const recommendData = await API.getRecommendMovie(id)\r\n        setMovie(data)\r\n        setRecommend(recommendData.results)\r\n        setIsLoading(false)\r\n    }\r\n\r\n    useEffect(fetchMovie, [id])\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isLoading\r\n                    ? <div>loading</div>\r\n                    : <Flex direction=\"column\">\r\n                        <Movie isFromMoviePage={true} movie={movie} />\r\n                        <Text\r\n                            mt={35}\r\n                            fontWeight=\"bold\"\r\n                            textAlign=\"center\"\r\n                            fontSize={20}\r\n                        >\r\n                            Рекомендации\r\n                        </Text>\r\n                        <MovieList movies={recommend}/>\r\n                    </Flex>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoviePage;","import React, {useEffect, useState} from 'react';\r\nimport Movies from \"./Movies\";\r\n\r\nconst Favorites = () => {\r\n\r\n    const [favs, setFavs] = useState([])\r\n\r\n    useEffect(()=>{\r\n        console.log(\"EFFECT\")\r\n        let localFavs\r\n        if (localStorage.getItem('favorites')) {\r\n            localFavs = JSON.parse(localStorage.getItem('favorites'))\r\n            setFavs(localFavs)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div>Избранные</div>\r\n            <Movies movies={favs}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Favorites;","import React from 'react';\r\nimport Wrapper from \"./Wrapper\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport MoviesPage from \"./MoviesPage\";\r\nimport MoviePage from \"./MoviePage\";\r\nimport Favorites from \"./Favorites\";\r\n\r\nconst AppRouter = () => {\r\n    return (\r\n        <Wrapper>\r\n            <Switch>\r\n                <Route exact path=\"/movies\">\r\n                    <MoviesPage />\r\n                </Route>\r\n                <Route path=\"/favorites\">\r\n                    <Favorites />\r\n                </Route>\r\n                <Route exact path=\"/movies/:id\">\r\n                    <MoviePage />\r\n                </Route>\r\n                <Redirect to=\"/movies\" />\r\n            </Switch>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import './App.css';\nimport {Grid} from \"@chakra-ui/react\";\nimport Header from \"./components/Header\";\nimport AppRouter from \"./components/AppRouter\";\n\nconst App = () => {\n    return (\n        <Grid templateRows=\"80px 1fr\" gap=\"15px\" mb=\"15px\">\n            <Header/>\n            <AppRouter/>\n        </Grid>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {ChakraProvider} from \"@chakra-ui/react\"\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <ChakraProvider>\n            <App/>\n        </ChakraProvider>\n    </HashRouter>\n    , document.getElementById('root')\n);\n"],"sourceRoot":""}